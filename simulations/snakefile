import os
import glob
import pathlib
from sys import platform
from pathlib import Path
from simulations.load_inputs import load_sites
import simulations.manifest as manifest
from simulations.helpers import get_comps_id_filename


sites, nSims, script_names = load_sites()

id_folder = manifest.comps_id_folder
input_files = [manifest.suite_id_file, manifest.eradication_found, manifest.sif_id]
experiment_files = list()
analyzers_files = list()


def get_command(script="run_sims.py", python_version: str=None, site: str=None, n: int=0,
                use_local_eradication: bool=False):
    extra_arguments = ''
    if site:
        extra_arguments += ' -s ' + site
    if n:
        extra_arguments += ' -n ' + str(n)
    if use_local_eradication:
        extra_arguments += ' -l ' + use_local_eradication

    if python_version:
        command = python_version + " " + script  + extra_arguments
    elif platform == "linux":
        command = "python3 " + script + extra_arguments
    elif platform == "win32":
        command = "python " + script + extra_arguments
    else:
        print("Unknown OS")
        raise Exception  
    return command

for site in sites:
    experiment_files.append(get_comps_id_filename(site, level=0))
    analyzers_files.append(get_comps_id_filename(site, level=2))
    input_files.append(get_comps_id_filename(site, level=3)) # todo: change to a output file from plotting rules

print( input_files )

rule run:
    input: input_files
    output:
    shell: ""

rule clean:
    input: 
    output: 
    run:
        path_all = glob.glob (id_folder + "/*")
        extension=('trickgit')
        path_remove=[filename for filename in path_all if not filename.endswith (extension)]
        for filePath in path_remove:
            if os.path.exists(filePath):
                os.remove(filePath)

rule clean_exp:
    input:
    output:
    run:
        for experiment_file in experiment_files:
            if os.path.exists(experiment_file):
                os.remove(experiment_file)

rule clean_ana:
    input:
    output:
    run:
        for analyzers_file in analyzers_files:
            if os.path.exists(analyzers_file):
                os.remove(analyzers_file)

rule clean_download:
    input:
    output:
    run:
        for download_file in input_files[1:]: # keep the suite_id file
            if os.path.exists(download_file):
                os.remove(download_file)

rule save_exp_to_suite:
    input: experiment_files
    output: f'{manifest.suite_id_file}'
    priority: 1
    run:
        shell(get_command(script="add_suite.py"))

rule get_eradication:
    input:
    output: f'{manifest.eradication_found}'
    priority: 10
    run:
        shell(get_command(script="get_eradication.py", use_local_eradication=manifest.use_local_eradication))

rule sif_id:
    input:
    output: f'{manifest.sif_id}'
    priority: 10
    run:
        if manifest.singularity_id:
            with open(manifest.sif_id, 'w') as sif_file:
                sif_file.write(manifest.singularity_id)
        else:
            print("Not using singularity image.")

rule chonyi_1999_run_sim:
    input: 
    output: 'COMPS_ID/chonyi_1999_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="chonyi_1999", n=5))

rule chonyi_1999_analyzer:
    input: 'COMPS_ID/chonyi_1999_exp_submit'
    output: 'COMPS_ID/chonyi_1999_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="chonyi_1999"))

rule chonyi_1999_download:
    input: 'COMPS_ID/chonyi_1999_analyzers'
    output: 'COMPS_ID/chonyi_1999_download'
    run:
        shell(get_command(script="download_wi.py", site="chonyi_1999"))
    
rule ngerenya_1999_run_sim:
    input: 
    output: 'COMPS_ID/ngerenya_1999_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="ngerenya_1999", n=5))

rule ngerenya_1999_analyzer:
    input: 'COMPS_ID/ngerenya_1999_exp_submit'
    output: 'COMPS_ID/ngerenya_1999_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="ngerenya_1999"))

rule ngerenya_1999_download:
    input: 'COMPS_ID/ngerenya_1999_analyzers'
    output: 'COMPS_ID/ngerenya_1999_download'
    run:
        shell(get_command(script="download_wi.py", site="ngerenya_1999"))
    
rule dielmo_1990_run_sim:
    input: 
    output: 'COMPS_ID/dielmo_1990_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="dielmo_1990", n=5))

rule dielmo_1990_analyzer:
    input: 'COMPS_ID/dielmo_1990_exp_submit'
    output: 'COMPS_ID/dielmo_1990_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="dielmo_1990"))

rule dielmo_1990_download:
    input: 'COMPS_ID/dielmo_1990_analyzers'
    output: 'COMPS_ID/dielmo_1990_download'
    run:
        shell(get_command(script="download_wi.py", site="dielmo_1990"))
    
rule ndiop_1993_run_sim:
    input: 
    output: 'COMPS_ID/ndiop_1993_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="ndiop_1993", n=5))

rule ndiop_1993_analyzer:
    input: 'COMPS_ID/ndiop_1993_exp_submit'
    output: 'COMPS_ID/ndiop_1993_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="ndiop_1993"))

rule ndiop_1993_download:
    input: 'COMPS_ID/ndiop_1993_analyzers'
    output: 'COMPS_ID/ndiop_1993_download'
    run:
        shell(get_command(script="download_wi.py", site="ndiop_1993"))
    
rule ebolakounou_1997_run_sim:
    input: 
    output: 'COMPS_ID/ebolakounou_1997_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="ebolakounou_1997", n=5))

rule ebolakounou_1997_analyzer:
    input: 'COMPS_ID/ebolakounou_1997_exp_submit'
    output: 'COMPS_ID/ebolakounou_1997_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="ebolakounou_1997"))

rule ebolakounou_1997_download:
    input: 'COMPS_ID/ebolakounou_1997_analyzers'
    output: 'COMPS_ID/ebolakounou_1997_download'
    run:
        shell(get_command(script="download_wi.py", site="ebolakounou_1997"))
    
rule koundou_1997_run_sim:
    input: 
    output: 'COMPS_ID/koundou_1997_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="koundou_1997", n=5))

rule koundou_1997_analyzer:
    input: 'COMPS_ID/koundou_1997_exp_submit'
    output: 'COMPS_ID/koundou_1997_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="koundou_1997"))

rule koundou_1997_download:
    input: 'COMPS_ID/koundou_1997_analyzers'
    output: 'COMPS_ID/koundou_1997_download'
    run:
        shell(get_command(script="download_wi.py", site="koundou_1997"))
    
rule dongubougou_1999_run_sim:
    input: 
    output: 'COMPS_ID/dongubougou_1999_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="dongubougou_1999", n=5))

rule dongubougou_1999_analyzer:
    input: 'COMPS_ID/dongubougou_1999_exp_submit'
    output: 'COMPS_ID/dongubougou_1999_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="dongubougou_1999"))

rule dongubougou_1999_download:
    input: 'COMPS_ID/dongubougou_1999_analyzers'
    output: 'COMPS_ID/dongubougou_1999_download'
    run:
        shell(get_command(script="download_wi.py", site="dongubougou_1999"))
    
rule sotuba_1999_run_sim:
    input: 
    output: 'COMPS_ID/sotuba_1999_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="sotuba_1999", n=5))

rule sotuba_1999_analyzer:
    input: 'COMPS_ID/sotuba_1999_exp_submit'
    output: 'COMPS_ID/sotuba_1999_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="sotuba_1999"))

rule sotuba_1999_download:
    input: 'COMPS_ID/sotuba_1999_analyzers'
    output: 'COMPS_ID/sotuba_1999_download'
    run:
        shell(get_command(script="download_wi.py", site="sotuba_1999"))
    
rule matsari_1970_run_sim:
    input: 
    output: 'COMPS_ID/matsari_1970_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="matsari_1970", n=20))

rule matsari_1970_analyzer:
    input: 'COMPS_ID/matsari_1970_exp_submit'
    output: 'COMPS_ID/matsari_1970_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="matsari_1970"))

rule matsari_1970_download:
    input: 'COMPS_ID/matsari_1970_analyzers'
    output: 'COMPS_ID/matsari_1970_download'
    run:
        shell(get_command(script="download_wi.py", site="matsari_1970"))
    
rule rafin_marke_1970_run_sim:
    input: 
    output: 'COMPS_ID/rafin_marke_1970_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="rafin_marke_1970", n=20))

rule rafin_marke_1970_analyzer:
    input: 'COMPS_ID/rafin_marke_1970_exp_submit'
    output: 'COMPS_ID/rafin_marke_1970_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="rafin_marke_1970"))

rule rafin_marke_1970_download:
    input: 'COMPS_ID/rafin_marke_1970_analyzers'
    output: 'COMPS_ID/rafin_marke_1970_download'
    run:
        shell(get_command(script="download_wi.py", site="rafin_marke_1970"))
    
rule sugungum_1970_run_sim:
    input: 
    output: 'COMPS_ID/sugungum_1970_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="sugungum_1970", n=20))

rule sugungum_1970_analyzer:
    input: 'COMPS_ID/sugungum_1970_exp_submit'
    output: 'COMPS_ID/sugungum_1970_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="sugungum_1970"))

rule sugungum_1970_download:
    input: 'COMPS_ID/sugungum_1970_analyzers'
    output: 'COMPS_ID/sugungum_1970_download'
    run:
        shell(get_command(script="download_wi.py", site="sugungum_1970"))
    
rule navrongo_2000_run_sim:
    input: 
    output: 'COMPS_ID/navrongo_2000_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="navrongo_2000", n=20))

rule navrongo_2000_analyzer:
    input: 'COMPS_ID/navrongo_2000_exp_submit'
    output: 'COMPS_ID/navrongo_2000_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="navrongo_2000"))

rule navrongo_2000_download:
    input: 'COMPS_ID/navrongo_2000_analyzers'
    output: 'COMPS_ID/navrongo_2000_download'
    run:
        shell(get_command(script="download_wi.py", site="navrongo_2000"))
    
rule laye_2007_run_sim:
    input: 
    output: 'COMPS_ID/laye_2007_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="laye_2007", n=20))

rule laye_2007_analyzer:
    input: 'COMPS_ID/laye_2007_exp_submit'
    output: 'COMPS_ID/laye_2007_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="laye_2007"))

rule laye_2007_download:
    input: 'COMPS_ID/laye_2007_analyzers'
    output: 'COMPS_ID/laye_2007_download'
    run:
        shell(get_command(script="download_wi.py", site="laye_2007"))
    
rule dapelogo_2007_run_sim:
    input: 
    output: 'COMPS_ID/dapelogo_2007_exp_submit'
    priority: 5
    run:
        shell(get_command(script="run_sims.py", site="dapelogo_2007", n=20))

rule dapelogo_2007_analyzer:
    input: 'COMPS_ID/dapelogo_2007_exp_submit'
    output: 'COMPS_ID/dapelogo_2007_analyzers'
    run:
        shell(get_command(script="run_analyzers.py", site="dapelogo_2007"))

rule dapelogo_2007_download:
    input: 'COMPS_ID/dapelogo_2007_analyzers'
    output: 'COMPS_ID/dapelogo_2007_download'
    run:
        shell(get_command(script="download_wi.py", site="dapelogo_2007"))
    