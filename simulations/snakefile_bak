import os
import glob
import pathlib
from sys import platform
from pathlib import Path
from simulations.load_inputs import load_sites
import simulations.manifest as manifest
from simulations.helpers import get_comps_id_filename


sites, nSims, script_names = load_sites()

id_folder = manifest.comps_id_folder
download_files = [manifest.suite_id_file, manifest.eradication_found, manifest.sif_id]
experiment_files = list()
analyzers_files = list()


def get_command(script="run_sims.py", python_version: str=None, site: str=None, n: int=0,
                use_local_eradication: bool=False):
    extra_arguments = ''
    if site:
        extra_arguments += ' -s ' + site
    if n:
        extra_arguments += ' -n ' + str(n)
    if use_local_eradication:
        extra_arguments += ' -l ' + use_local_eradication

    if python_version:
        command = python_version + " " + script  + extra_arguments
    elif platform == "linux":
        command = "python3 " + script + extra_arguments
    elif platform == "win32":
        command = "python " + script + extra_arguments
    else:
        print("Unknown OS")
        raise Exception  
    return command

for site in sites:
    experiment_files.append(get_comps_id_filename(site, level=0))
    analyzers_files.append(get_comps_id_filename(site, level=2))
    download_files.append(get_comps_id_filename(site, level=3))

plot_file = manifest.comps_id_folder + 'plot_completed'
report_file = manifest.comps_id_folder + 'report_completed'
final_file = manifest.comps_id_folder + 'workflow_completed'

rule run:
    input: report_file
    output: final_file
    run:
        with open(final_file, 'w') as file:
            file.write('Workflow is completed.')

rule clean:
    input: 
    output: 
    run:
        path_all = glob.glob (id_folder + "/*")
        extension=('trickgit')
        path_remove=[filename for filename in path_all if not filename.endswith (extension)]
        for filePath in path_remove:
            if os.path.exists(filePath):
                os.remove(filePath)

def clean_final_file():
    if os.path.exists(final_file):
        os.remove(final_file)

def clean_report():
    if os.path.exists(report_file):
        os.remove(report_file)
    clean_final_file()

def clean_plot():
    if os.path.exists(plot_file):
        os.remove(plot_file)
    clean_report()

def clean_download():
    for download_file in download_files[3:]: # keep the suite_id, Eradication found and sif_id files
        if os.path.exists(download_file):
            os.remove(download_file)
    clean_plot()

def clean_ana():
    for analyzers_file in analyzers_files:
            if os.path.exists(analyzers_file):
                os.remove(analyzers_file)
    clean_download()

def clean_exp():
    for experiment_file in experiment_files:
            if os.path.exists(experiment_file):
                os.remove(experiment_file)
    clean_ana()

rule clean_exp:
    input:
    output:
    run:
        clean_exp()

rule clean_ana:
    input:
    output:
    run:
        clean_ana()

rule clean_download:
    input:
    output:
    run:
        clean_download()

rule clean_plot:
    input:
    output:
    run:
        clean_plot()

rule clean_report:
    input:
    output:
    run:
        clean_report()

rule save_exp_to_suite:
    input: experiment_files
    output: f'{manifest.suite_id_file}'
    priority: 1
    run:
        shell(get_command(script="add_suite.py"))

rule get_eradication:
    input:
    output: f'{manifest.eradication_found}'
    priority: 10
    run:
        shell(get_command(script="get_eradication.py", use_local_eradication=manifest.use_local_eradication))

rule sif_id:
    input:
    output: f'{manifest.sif_id}'
    priority: 10
    run:
        if manifest.singularity_id:
            with open(manifest.sif_id, 'w') as sif_file:
                sif_file.write(manifest.singularity_id)
        else:
            print("Not using singularity image.")

rule plot:
    input: download_files
    output: plot_file
    run:
        shell(get_command(script=str(manifest.base_script_plot_filepath / "run_generate_validation_comparisons_site.py")))

rule report:
    input: plot_file
    output: report_file
    run:
        shell(get_command(script=str(manifest.plot_output_filepath.parent / "create_pdf_report.py")))
